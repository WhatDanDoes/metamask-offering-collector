<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="description" content="<%= process.env.TITLE %>">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= process.env.TITLE %></title>
    <link rel='stylesheet' href='/stylesheets/mvp.css' />
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <header>
      <nav>
        <a href="/"><img alt="Logo" src="https://via.placeholder.com/200x70?text=Logo" height="70"></a>
        <ul>
          <li id="connect-metamask"></li>
        </ul>
      </nav>
    </header>
    <main>
      <h1><%= title %></h1>
      <p>Proverbs 3:9-10</p>
    </main>
    <script>
      /**
       * 2021-9-27 Adapted from https://docs.metamask.io/guide/create-dapp.html
       */
      document.addEventListener('DOMContentLoaded', function(event) {
        const connectMetamask = document.getElementById('connect-metamask');

        // Created check function to see if the MetaMask extension is installed
        const isMetaMaskInstalled = () => {
          // Have to check the ethereum binding on the window object to see if it's installed
          const { ethereum } = window;
          return Boolean(ethereum && ethereum.isMetaMask);
        };

        if (isMetaMaskInstalled()) {
          handleIdentification = () => {
            document.getElementById("connect-metamask-button").disabled = true;
            ethereum.request({ method: 'eth_requestAccounts' }).then(accounts => {;

              const account = accounts[0];

              const data = { publicAddress: account };

              // Get nonce for signing
              fetch('/identify', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              })
              .then(response => response.json())
              // Sign message
              .then(({ publicAddress, message }) => {
                console.log('Sign this nonce:', message[1].value, '\nWith this public address:', publicAddress);

                return new Promise((resolve, reject) => {
                  ethereum.request({ method: 'eth_signTypedData', params: [message, publicAddress] }).then(signed => {;
                    console.log('Signed');
                    console.log(signed);
                    resolve({ publicAddress, message });
                  }).catch(err => {
                    console.error('Error:', err);
                  });
                });
              })
              // Identify
              .then(({ publicAddress, message }) => {
                return new Promise((resolve, reject) => {
                  resolve({ publicAddress, message });
                });
              })
              .then(({ publicAddress, message }) => {
                connectMetamask.innerHTML = '<a href="/disconnect"><button id="disconnect-metamask-button" type="submit">Disconnect Metamask</button></a>';
              }).catch(err => {
                console.error('Error:', err);
              });
            }).catch(err => {
              console.error('Something dreadful happened when accessing your account');
              console.error(err);
            });
          };

          connectMetamask.innerHTML = '<button id="connect-metamask-button" type="submit">Confirm your identity with Metamask</button>';

          document.getElementById('connect-metamask-button').addEventListener('click', handleIdentification);
        }
        else {
          connectMetamask.innerHTML = 'Click here to install the Metamask browser plugin';
        }
      });
    </script>
  </body>
</html>
